openapi: 3.0.0
info:
  title: Git Merge/Rebase API
  description: API for managing Git merge and rebase operations
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server

security:
  - BearerAuth: []
  - BasicAuth: []
  - CookieAuth: []
  - OidcAuth: []
  - SamlAuth: []

paths:
  /repos/{repo}/merge:
    post:
      tags:
        - Merge/Rebase
      summary: Merge branch
      description: Merges a branch into another branch
      operationId: mergeBranch
      parameters:
        - name: repo
          in: path
          description: Repository name or ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeRequest'
      responses:
        '200':
          description: Merge completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeResult'
        '202':
          description: Merge started (async operation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

  /repos/{repo}/rebase:
    post:
      tags:
        - Merge/Rebase
      summary: Rebase branch
      description: Rebases a branch onto another branch
      operationId: rebaseBranch
      parameters:
        - name: repo
          in: path
          description: Repository name or ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RebaseRequest'
      responses:
        '200':
          description: Rebase completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RebaseResult'
        '202':
          description: Rebase started (async operation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RebaseStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

  /repos/{repo}/merge/{branch}:
    get:
      tags:
        - Merge/Rebase
      summary: Get merge status
      description: Retrieves the status of a merge operation
      operationId: getMergeStatus
      parameters:
        - name: repo
          in: path
          description: Repository name or ID
          required: true
          schema:
            type: string
        - name: branch
          in: path
          description: Branch name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /repos/{repo}/rebase/{branch}:
    get:
      tags:
        - Merge/Rebase
      summary: Get rebase status
      description: Retrieves the status of a rebase operation
      operationId: getRebaseStatus
      parameters:
        - name: repo
          in: path
          description: Repository name or ID
          required: true
          schema:
            type: string
        - name: branch
          in: path
          description: Branch name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RebaseStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /repos/{repo}/merge/{branch}/abort:
    post:
      tags:
        - Merge/Rebase
      summary: Abort merge
      description: Aborts an in-progress merge operation
      operationId: abortMerge
      parameters:
        - name: repo
          in: path
          description: Repository name or ID
          required: true
          schema:
            type: string
        - name: branch
          in: path
          description: Branch name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Merge aborted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Merge aborted successfully"
                  status:
                    type: string
                    example: "aborted"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

  /repos/{repo}/rebase/{branch}/abort:
    post:
      tags:
        - Merge/Rebase
      summary: Abort rebase
      description: Aborts an in-progress rebase operation
      operationId: abortRebase
      parameters:
        - name: repo
          in: path
          description: Repository name or ID
          required: true
          schema:
            type: string
        - name: branch
          in: path
          description: Branch name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rebase aborted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Rebase aborted successfully"
                  status:
                    type: string
                    example: "aborted"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    BasicAuth:
      type: http
      scheme: basic
    CookieAuth:
      type: apiKey
      in: cookie
      name: session_token
    OidcAuth:
      type: openIdConnect
      openIdConnectUrl: https://auth.example.com/.well-known/openid-configuration
    SamlAuth:
      type: apiKey
      in: header
      name: X-SAML-Assertion

  schemas:
    MergeRequest:
      type: object
      required:
        - source
        - target
      properties:
        source:
          type: string
          description: Source branch name or commit SHA
          example: "feature/new-feature"
        target:
          type: string
          description: Target branch name
          example: "main"
        message:
          type: string
          description: Merge commit message
          example: "Merge feature/new-feature into main"
        commit_message:
          type: string
          description: Alternative field for merge commit message
          example: "Merge pull request #123 from user/feature/new-feature"
        strategy:
          type: string
          description: Merge strategy
          enum: [merge, squash, rebase]
          default: merge
          example: "merge"
        async:
          type: boolean
          description: Run merge asynchronously
          default: false
          example: false

    RebaseRequest:
      type: object
      required:
        - source
        - target
      properties:
        source:
          type: string
          description: Source branch name
          example: "feature/new-feature"
        target:
          type: string
          description: Target branch name or commit SHA
          example: "main"
        async:
          type: boolean
          description: Run rebase asynchronously
          default: false
          example: false
        autosquash:
          type: boolean
          description: Automatically squash commits
          default: false
          example: false
        autosign:
          type: boolean
          description: Automatically sign commits
          default: false
          example: false

    MergeResult:
      type: object
      properties:
        sha:
          type: string
          description: Merge commit SHA
          example: "abc123def4567890abcdef1234567890abcdef12"
        merged:
          type: boolean
          description: Whether the merge was successful
          example: true
        message:
          type: string
          description: Merge commit message
          example: "Merge feature/new-feature into main"
        author:
          $ref: '#/components/schemas/CommitAuthor'
        committer:
          $ref: '#/components/schemas/CommitAuthor'
        url:
          type: string
          description: URL to the merge commit
          example: "https://api.example.com/v1/repos/my-repo/commits/abc123def4567890abcdef1234567890abcdef12"
        html_url:
          type: string
          description: HTML URL to the merge commit
          example: "https://github.com/user/my-repo/commit/abc123def4567890abcdef1234567890abcdef12"
        stats:
          type: object
          properties:
            additions:
              type: integer
              description: Number of additions
              example: 10
            deletions:
              type: integer
              description: Number of deletions
              example: 5
            total:
              type: integer
              description: Total number of changes
              example: 15
            files_changed:
              type: integer
              description: Number of files changed
              example: 3

    RebaseResult:
      type: object
      properties:
        rebased:
          type: boolean
          description: Whether the rebase was successful
          example: true
        message:
          type: string
          description: Rebase result message
          example: "Successfully rebased feature/new-feature onto main"
        commits:
          type: array
          description: Commits that were rebased
          items:
            $ref: '#/components/schemas/CommitSummary'
        source:
          type: string
          description: Source branch name
          example: "feature/new-feature"
        target:
          type: string
          description: Target branch name
          example: "main"

    MergeStatus:
      type: object
      properties:
        status:
          type: string
          description: Merge status
          enum: [pending, in_progress, completed, failed, aborted, conflict]
          example: "completed"
        message:
          type: string
          description: Status message
          example: "Merge completed successfully"
        sha:
          type: string
          description: Merge commit SHA (if completed)
          example: "abc123def4567890abcdef1234567890abcdef12"
        progress:
          type: integer
          description: Progress percentage (0-100)
          example: 100
        started_at:
          type: string
          format: date-time
          description: Start time of the merge
          example: "2023-01-01T00:00:00Z"
        completed_at:
          type: string
          format: date-time
          description: Completion time of the merge
          example: "2023-01-01T00:01:00Z"
        conflicts:
          type: array
          description: List of conflicts (if any)
          items:
            $ref: '#/components/schemas/MergeConflict'

    RebaseStatus:
      type: object
      properties:
        status:
          type: string
          description: Rebase status
          enum: [pending, in_progress, completed, failed, aborted, conflict]
          example: "completed"
        message:
          type: string
          description: Status message
          example: "Rebase completed successfully"
        progress:
          type: integer
          description: Progress percentage (0-100)
          example: 100
        started_at:
          type: string
          format: date-time
          description: Start time of the rebase
          example: "2023-01-01T00:00:00Z"
        completed_at:
          type: string
          format: date-time
          description: Completion time of the rebase
          example: "2023-01-01T00:01:00Z"
        current_commit:
          type: string
          description: Current commit being rebased
          example: "def456abc7890123def456abc7890123def456ab"
        conflicts:
          type: array
          description: List of conflicts (if any)
          items:
            $ref: '#/components/schemas/RebaseConflict'

    MergeConflict:
      type: object
      properties:
        path:
          type: string
          description: Path of the file with conflicts
          example: "src/main.js"
        conflict_type:
          type: string
          description: Type of conflict
          enum: [both_modified, both_added, both_deleted, added_by_them, added_by_us, deleted_by_them, deleted_by_us]
          example: "both_modified"
        message:
          type: string
          description: Conflict message
          example: "Both modified src/main.js"
        base_content:
          type: string
          description: Base content of the file
          example: "console.log('Hello');"
        source_content:
          type: string
          description: Source content of the file
          example: "console.log('Hello World');"
        target_content:
          type: string
          description: Target content of the file
          example: "console.log('Hello Git');"

    RebaseConflict:
      type: object
      properties:
        commit:
          type: string
          description: Commit SHA with the conflict
          example: "def456abc7890123def456abc7890123def456ab"
        path:
          type: string
          description: Path of the file with conflicts
          example: "src/main.js"
        conflict_type:
          type: string
          description: Type of conflict
          enum: [both_modified, both_added, both_deleted, added_by_them, added_by_us, deleted_by_them, deleted_by_us]
          example: "both_modified"
        message:
          type: string
          description: Conflict message
          example: "Both modified src/main.js in commit def456a"
        base_content:
          type: string
          description: Base content of the file
          example: "console.log('Hello');"
        source_content:
          type: string
          description: Source content of the file
          example: "console.log('Hello World');"
        target_content:
          type: string
          description: Target content of the file
          example: "console.log('Hello Git');"

    CommitSummary:
      type: object
      properties:
        sha:
          type: string
          description: Commit SHA
          example: "abc123def4567890abcdef1234567890abcdef12"
        message:
          type: string
          description: Commit message
          example: "Add new feature"
        author:
          $ref: '#/components/schemas/CommitAuthor'
        committer:
          $ref: '#/components/schemas/CommitAuthor'
        timestamp:
          type: string
          format: date-time
          description: Commit timestamp
          example: "2023-01-01T00:00:00Z"
        url:
          type: string
          description: URL to the commit
          example: "https://api.example.com/v1/repos/my-repo/commits/abc123def4567890abcdef1234567890abcdef12"

    CommitAuthor:
      type: object
      properties:
        name:
          type: string
          description: Author name
          example: John Doe
        email:
          type: string
          format: email
          description: Author email
          example: john.doe@example.com
        date:
          type: string
          format: date-time
          description: Author date
          example: "2023-01-01T00:00:00Z"

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
              example: invalid_request
            message:
              type: string
              description: Error message
              example: The request is malformed or contains invalid parameters
            details:
              type: object
              description: Additional error details
              example: {}

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'