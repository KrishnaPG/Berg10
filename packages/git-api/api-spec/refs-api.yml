openapi: 3.0.0
info:
  title: Git Refs API
  description: API for managing Git references (branches and tags)
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server

security:
  - BearerAuth: []
  - BasicAuth: []
  - CookieAuth: []
  - OidcAuth: []
  - SamlAuth: []

paths:
  /repos/{repo}/refs:
    get:
      tags:
        - Refs
      summary: List all refs
      description: Retrieves all references (branches and tags) in a repository
      operationId: listAllRefs
      parameters:
        - name: repo
          in: path
          description: Repository name or ID
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - name: sort
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            enum: [name, created, updated]
            default: name
        - name: order
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: filter
          in: query
          description: Filter refs by pattern
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Ref'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /repos/{repo}/refs/heads:
    get:
      tags:
        - Refs
      summary: List branches
      description: Retrieves all branches in a repository
      operationId: listBranches
      parameters:
        - name: repo
          in: path
          description: Repository name or ID
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - name: sort
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            enum: [name, created, updated]
            default: name
        - name: order
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: filter
          in: query
          description: Filter branches by pattern
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Branch'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Refs
      summary: Create branch
      description: Creates a new branch in the repository
      operationId: createBranch
      parameters:
        - name: repo
          in: path
          description: Repository name or ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BranchCreateRequest'
      responses:
        '201':
          description: Branch created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

  /repos/{repo}/refs/tags:
    get:
      tags:
        - Refs
      summary: List tags
      description: Retrieves all tags in a repository
      operationId: listTags
      parameters:
        - name: repo
          in: path
          description: Repository name or ID
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - name: sort
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            enum: [name, created, updated]
            default: name
        - name: order
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: filter
          in: query
          description: Filter tags by pattern
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Refs
      summary: Create tag
      description: Creates a new tag in the repository
      operationId: createTag
      parameters:
        - name: repo
          in: path
          description: Repository name or ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreateRequest'
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

  /repos/{repo}/refs/{ref}:
    get:
      tags:
        - Refs
      summary: Get ref details
      description: Retrieves detailed information about a specific reference
      operationId: getRef
      parameters:
        - name: repo
          in: path
          description: Repository name or ID
          required: true
          schema:
            type: string
        - name: ref
          in: path
          description: Reference name (e.g., "heads/main" or "tags/v1.0.0")
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Branch'
                  - $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - Refs
      summary: Update ref
      description: Updates a reference (usually to move a branch)
      operationId: updateRef
      parameters:
        - name: repo
          in: path
          description: Repository name or ID
          required: true
          schema:
            type: string
        - name: ref
          in: path
          description: Reference name (e.g., "heads/main" or "tags/v1.0.0")
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefUpdateRequest'
      responses:
        '200':
          description: Reference updated successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Branch'
                  - $ref: '#/components/schemas/Tag'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
    delete:
      tags:
        - Refs
      summary: Delete ref
      description: Deletes a reference (branch or tag)
      operationId: deleteRef
      parameters:
        - name: repo
          in: path
          description: Repository name or ID
          required: true
          schema:
            type: string
        - name: ref
          in: path
          description: Reference name (e.g., "heads/main" or "tags/v1.0.0")
          required: true
          schema:
            type: string
        - name: force
          in: query
          description: Force delete even if not merged (branches only)
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: Reference deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    BasicAuth:
      type: http
      scheme: basic
    CookieAuth:
      type: apiKey
      in: cookie
      name: session_token
    OidcAuth:
      type: openIdConnect
      openIdConnectUrl: https://auth.example.com/.well-known/openid-configuration
    SamlAuth:
      type: apiKey
      in: header
      name: X-SAML-Assertion

  parameters:
    Page:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    PerPage:
      name: per_page
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 30

  schemas:
    BranchCreateRequest:
      type: object
      required:
        - name
        - ref
      properties:
        name:
          type: string
          description: Branch name
          example: feature/new-feature
        ref:
          type: string
          description: Source reference (commit SHA, branch name, or tag name)
          example: main
        start_point:
          type: string
          description: Starting point for the branch (if different from ref)
          example: abc123def456

    TagCreateRequest:
      type: object
      required:
        - name
        - ref
      properties:
        name:
          type: string
          description: Tag name
          example: v1.0.0
        ref:
          type: string
          description: Source reference (commit SHA, branch name, or tag name)
          example: main
        message:
          type: string
          description: Tag message
          example: "Release version 1.0.0"
        lightweight:
          type: boolean
          description: Create a lightweight tag (without message)
          default: false
          example: false

    RefUpdateRequest:
      type: object
      required:
        - ref
      properties:
        ref:
          type: string
          description: New target reference (commit SHA)
          example: abc123def456
        force:
          type: boolean
          description: Force update even if not fast-forward
          default: false
          example: false

    Ref:
      type: object
      required:
        - name
        - ref
        - object
      properties:
        name:
          type: string
          description: Reference name
          example: main
        ref:
          type: string
          description: Full reference path
          example: refs/heads/main
        object:
          type: object
          properties:
            type:
              type: string
              description: Object type
              example: commit
            sha:
              type: string
              description: Object SHA
              example: abc123def4567890abcdef1234567890abcdef12
        url:
          type: string
          description: URL to the reference
          example: https://api.example.com/v1/repos/my-repo/refs/heads/main

    Branch:
      allOf:
        - $ref: '#/components/schemas/Ref'
        - type: object
          properties:
            type:
              type: string
              description: Reference type
              example: branch
            protected:
              type: boolean
              description: Whether the branch is protected
              example: false
            default_branch:
              type: boolean
              description: Whether this is the default branch
              example: true
            commit:
              $ref: '#/components/schemas/CommitSummary'
            merged:
              type: boolean
              description: Whether the branch has been merged
              example: true
            ahead_by:
              type: integer
              description: Number of commits ahead of the base branch
              example: 3
            behind_by:
              type: integer
              description: Number of commits behind the base branch
              example: 0

    Tag:
      allOf:
        - $ref: '#/components/schemas/Ref'
        - type: object
          properties:
            type:
              type: string
              description: Reference type
              example: tag
            tagger:
              $ref: '#/components/schemas/CommitAuthor'
            message:
              type: string
              description: Tag message
              example: "Release version 1.0.0"
            lightweight:
              type: boolean
              description: Whether this is a lightweight tag
              example: false
            commit:
              $ref: '#/components/schemas/CommitSummary'

    CommitSummary:
      type: object
      properties:
        sha:
          type: string
          description: Commit SHA
          example: abc123def4567890abcdef1234567890abcdef12
        message:
          type: string
          description: Commit message
          example: "Add new feature"
        author:
          $ref: '#/components/schemas/CommitAuthor'
        committer:
          $ref: '#/components/schemas/CommitAuthor'
        timestamp:
          type: string
          format: date-time
          description: Commit timestamp
          example: 2023-01-01T00:00:00Z
        url:
          type: string
          description: URL to the commit
          example: https://api.example.com/v1/repos/my-repo/commits/abc123def4567890abcdef1234567890abcdef12

    CommitAuthor:
      type: object
      properties:
        name:
          type: string
          description: Author name
          example: John Doe
        email:
          type: string
          format: email
          description: Author email
          example: john.doe@example.com
        date:
          type: string
          format: date-time
          description: Author date
          example: 2023-01-01T00:00:00Z

    PaginatedResponse:
      type: object
      properties:
        pagination:
          type: object
          properties:
            total_items:
              type: integer
              description: Total number of items
              example: 100
            total_pages:
              type: integer
              description: Total number of pages
              example: 10
            current_page:
              type: integer
              description: Current page number
              example: 1
            per_page:
              type: integer
              description: Number of items per page
              example: 10

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
              example: invalid_request
            message:
              type: string
              description: Error message
              example: The request is malformed or contains invalid parameters
            details:
              type: object
              description: Additional error details
              example: {}

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'